@using System.Threading
@using Microsoft.Extensions.Logging
@using Soenneker.Blazor.DataTables.Abstract
@using Soenneker.Blazor.Utils.InteropEventListener.Abstract
@using Soenneker.Extensions.ValueTask

@* ReSharper disable InconsistentNaming *@
@inject IDataTablesInterop _dataTablesInterop
@inject IInteropEventListener _interopEventListener
@inject ILogger<BaseDataTable> _logger
@* ReSharper restore InconsistentNaming *@

@code {
    [Parameter]
    public EventCallback OnInitialize { get; set; }

    [Parameter]
    public EventCallback OnDestroy { get; set; }

    [Parameter]
    public bool Debug { get; set; }

    protected bool _visible = true;

    protected override void OnInitialized()
    {
        InteropEventListener = _interopEventListener;
        DataTablesInterop = _dataTablesInterop;
        Logger = _logger;

        base.OnInitialized();
    }

    public virtual ValueTask Reinitialize()
    {
        return ValueTask.CompletedTask;
    }

    public async ValueTask Destroy(CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await DataTablesInterop.Destroy(ElementReference, linkedCts.Token).NoSync();
    }

}