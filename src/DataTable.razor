@using System.Threading
@using Microsoft.JSInterop
@using Soenneker.Blazor.DataTables.Options
@using Soenneker.Extensions.String
@using Soenneker.Extensions.ValueTask
@using Soenneker.Blazor.DataTables.Abstract
@using Soenneker.Blazor.Utils.InteropEventListener.Abstract
@using Microsoft.Extensions.Logging
@using Soenneker.Blazor.DataTables.Dtos
@using Soenneker.Utils.Json

@implements IDataTable
@implements IAsyncDisposable

<div style="@(_visible ? "" : "display:none")" >
    <table id="@ElementId" @ref="_elementReference" @attributes="Attributes" >
        @ChildContent
    </table>
</div>

@code {

    [Inject]
    private IDataTablesInterop _dataTablesInterop { get; set; } = null!;

    [Inject]
    private IInteropEventListener _interopEventListener { get; set; } = null!;

    [Inject]
    private ILogger<DataTable> _logger { get; set; } = null!;

    [Parameter]
    public EventCallback OnInitialize { get; set; }

    [Parameter]
    public EventCallback OnDestroy { get; set; }

    [Parameter]
    public Func<DataTablesServerSideRequest, Task<DataTablesServerResponse>>? OnServerSideRequest { get; set; }

    [Parameter]
    public bool Debug { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object?>? Attributes { get; set; }

    [Parameter]
    public DataTableOptions Options { get; set; } = new();

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private DotNetObjectReference<DataTable>? DotNetReference;
    public readonly string ElementId = $"datatable-{Guid.NewGuid().ToString()}";
    private readonly CancellationTokenSource _cTs = new();
    private ElementReference _elementReference;

    private bool _visible = true;
    private bool _elementInitialized;

    protected override async Task OnInitializedAsync()
    {
        await _dataTablesInterop.Initialize(_cTs.Token).NoSync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _interopEventListener.Initialize(_dataTablesInterop);
        }

        if (!_elementInitialized && _elementReference.Id.HasContent())
        {
            _elementInitialized = true;

            await Initialize().NoSync();
        }
    }

    public async ValueTask Initialize(DataTableOptions? configuration = null, CancellationToken cancellationToken = default)
    {
        if (configuration != null)
            Options = configuration;

        DotNetReference = DotNetObjectReference.Create(this);

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);

        await _dataTablesInterop.Create(_elementReference, ElementId, DotNetReference, Options, linkedCts.Token).NoSync();
        await _dataTablesInterop.CreateObserver(_elementReference, ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask RefreshWithDomUpdate(Func<ValueTask> domMutator, CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);

        await domMutator().NoSync();

        StateHasChanged();
        await Task.Yield();

        await _dataTablesInterop.Refresh(ElementId, linkedCts.Token).NoSync();
    }

    public ValueTask RefreshWithDomUpdate(Action domMutator, CancellationToken cancellationToken = default)
    {
        return RefreshWithDomUpdate(() =>
        {
            domMutator();
            return ValueTask.CompletedTask;
        }, cancellationToken);
    }

    public async ValueTask RecreateWithDomUpdate(Func<ValueTask> domMutator, CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);

        await domMutator().NoSync();

        StateHasChanged();
        await Task.Yield();

        await _dataTablesInterop.Destroy(_elementReference, linkedCts.Token).NoSync();
        await Initialize(null, linkedCts.Token).NoSync();
    }

    public ValueTask RecreateWithDomUpdate(Action domMutator, CancellationToken cancellationToken = default)
    {
        return RecreateWithDomUpdate(() =>
        {
            domMutator();
            return ValueTask.CompletedTask;
        }, cancellationToken);
    }

    [JSInvokable]
    public async Task OnInitializedJs()
    {
        await OnInitialize.InvokeAsync();
    }

    [JSInvokable]
    public async Task<string> OnServerSideRequestJs(int pageNumber, int pageSize, string? searchTerm, int? orderColumn, string? orderDirection)
    {
        var request = new DataTablesServerSideRequest
        {
            PageNumber = pageNumber,
            PageSize = pageSize,
            SearchTerm = searchTerm,
            OrderColumn = orderColumn,
            OrderDirection = orderDirection
        };


        if (OnServerSideRequest != null)
        {
            // Legacy string-based response for backward compatibility
            DataTablesServerResponse result = await OnServerSideRequest(request);

            return JsonUtil.Serialize(result);
        }

        // Default empty response
        return "{\"data\":[],\"recordsTotal\":0,\"recordsFiltered\":0,\"draw\":0}";
    }

    public async ValueTask DisposeAsync()
    {
        if (DotNetReference != null)
        {
            DotNetReference.Dispose();
        }

        await _cTs.CancelAsync();
        _cTs.Dispose();

        await OnDestroy.InvokeAsync();
    }
}