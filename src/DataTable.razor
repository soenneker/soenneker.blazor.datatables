@using System.Threading
@using Microsoft.JSInterop
@using Soenneker.Blazor.DataTables.Options
@using Soenneker.Extensions.String
@using Soenneker.Blazor.DataTables.Abstract
@using Soenneker.Blazor.Utils.InteropEventListener.Abstract
@using Microsoft.Extensions.Logging
@using Soenneker.DataTables.Dtos.ServerResponse
@using Soenneker.DataTables.Dtos.ServerSideRequest
@using Soenneker.Utils.Json
@using Soenneker.Extensions.CancellationTokens

@inherits Soenneker.Quark.Components.Cancellable.CancellableElement
@implements IDataTable

<div style="@(Visible ? "" : "display:none")" >
    <div class="dt-wrapper" style="position:relative;" >
        @if (ProcessingIndicator != null)
        {
            <div id="@(ElementId)-processing"
                 class="datatable-processing-indicator" style="display:none" >
                @ProcessingIndicator
            </div>
        }

        <table id="@ElementId" @ref="_elementReference" @attributes="Attributes" >
            @ChildContent
        </table>
    </div>
</div>

@code {

    [Inject]
    private IDataTablesInterop DataTablesInterop { get; set; } = null!;

    [Inject]
    private IInteropEventListener InteropEventListener { get; set; } = null!;

    [Inject]
    private ILogger<DataTable> Logger { get; set; } = null!;

    [Parameter]
    public EventCallback OnInitialize { get; set; }

    [Parameter]
    public EventCallback OnDestroy { get; set; }

    [Parameter]
    public Func<DataTableServerSideRequest, Task<DataTableServerResponse>>? OnServerSideRequest { get; set; }

    [Parameter]
    public bool Debug { get; set; }
    
    [Parameter]
    public DataTableOptions Options { get; set; } = new();

    /// <summary>
    /// Custom processing indicator content to display during server-side operations.
    /// This will replace the default DataTables processing indicator.
    /// </summary>
    [Parameter]
    public RenderFragment? ProcessingIndicator { get; set; }

    private DotNetObjectReference<DataTable>? _dotNetReference;
    public readonly string ElementId = $"datatable-{Guid.NewGuid().ToString()}";
    private ElementReference _elementReference;

    private string? _continuationToken;
    private readonly DataTableContinuationTokenPaging _pagingHelper = new();

    private string? _lastFingerprint;

    [Parameter]
    public bool Visible { get; set; } = true;

    private bool _elementInitialized;

    protected override async Task OnInitializedAsync()
    {
        await DataTablesInterop.Initialize(CancellationToken);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            InteropEventListener.Initialize(DataTablesInterop);
        }

        if (!_elementInitialized && _elementReference.Id.HasContent())
        {
            _elementInitialized = true;

            await Initialize();
        }
    }

    public async ValueTask Initialize(DataTableOptions? configuration = null, CancellationToken cancellationToken = default)
    {
        if (configuration != null)
            Options = configuration;

        _dotNetReference = DotNetObjectReference.Create(this);

        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
        {
            await DataTablesInterop.Create(_elementReference, ElementId, _dotNetReference, Options, linked);
            await DataTablesInterop.CreateObserver(_elementReference, ElementId, linked);
        }
    }

    public async ValueTask RefreshWithDomUpdate(Func<ValueTask> domMutator, CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
        {
            await domMutator();

            StateHasChanged();
            await Task.Yield();

            await DataTablesInterop.Refresh(ElementId, linked);
        }
    }

    public ValueTask RefreshWithDomUpdate(Action domMutator, CancellationToken cancellationToken = default)
    {
        return RefreshWithDomUpdate(() =>
        {
            domMutator();
            return ValueTask.CompletedTask;
        }, cancellationToken);
    }

    public async ValueTask RecreateWithDomUpdate(Func<ValueTask> domMutator, CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
        {
            await domMutator();

            StateHasChanged();
            await Task.Yield();

            await DataTablesInterop.Destroy(_elementReference, linked);
            await Initialize(null, linked);
        }
    }

    public ValueTask RecreateWithDomUpdate(Action domMutator, CancellationToken cancellationToken = default)
    {
        return RecreateWithDomUpdate(() =>
        {
            domMutator();
            return ValueTask.CompletedTask;
        }, cancellationToken);
    }


    [JSInvokable]
    public async ValueTask OnInitializedJs()
    {
        if (OnInitialize.HasDelegate)
        {
            await OnInitialize.InvokeAsync();
        }
    }

    [JSInvokable]
    public async Task<string> OnServerSideRequestJs(string dataTablesRequestJson)
    {
        try
        {
            var request = JsonUtil.Deserialize<DataTableServerSideRequest>(dataTablesRequestJson);

            if (request == null)
            {
                return "{\"data\":[],\"recordsTotal\":0,\"recordsFiltered\":0,\"draw\":0}";
            }

            if (OnServerSideRequest != null)
            {
                string fp = Fingerprint(request);

                if (fp != _lastFingerprint)
                {
                    _continuationToken = null;
                    _pagingHelper.Reset();
                    request.ContinuationToken = null;
                    _lastFingerprint = fp;
                }

                // Use the pagination helper to determine the continuation token
                string? continuationToken = _pagingHelper.UpdateVirtualPage(request.Start, request.Length, _continuationToken);
                request.ContinuationToken = continuationToken;

                DataTableServerResponse result = await OnServerSideRequest(request);
                
                // Update the continuation token from the response
                _continuationToken = result.ContinuationToken;
                
                // Update the pagination helper with the response data
                if (result.Data is IEnumerable<object> dataEnumerable)
                {
                    int recordCount = dataEnumerable.Count();
                    int currentPage = request.Start / request.Length;
                    string? tokenUsedForThisPage = request.ContinuationToken;
                    
                    // Store the continuation token from the response for the next page
                    // Also store the token that was used for the current page for backward navigation
                    _pagingHelper.UpdateFromResponse(request.Length, recordCount, result.ContinuationToken, tokenUsedForThisPage);
                }
                
                // Override the response with calculated pagination values
                var modifiedResult = new DataTableServerResponse
                {
                    Draw = result.Draw,
                    Data = result.Data,
                    Error = result.Error,
                    ContinuationToken = result.ContinuationToken,
                    TotalRecords = _pagingHelper.CalculateTotalRecords(request.Length),
                    TotalFilteredRecords = _pagingHelper.CalculateFilteredRecords()
                };
                
                return JsonUtil.Serialize(modifiedResult)!;
            }

            return "{\"data\":[],\"recordsTotal\":0,\"recordsFiltered\":0,\"draw\":0}";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing server-side request: {Message}", ex.Message);
            return "{\"data\":[],\"recordsTotal\":0,\"recordsFiltered\":0,\"draw\":0,\"error\":\"An error occurred while processing your request.\"}";
        }
    }

    private static string Fingerprint(DataTableServerSideRequest request)
    {
        // anything that changes the result set must appear here
        return $"{request.Search?.Value}|{request.Length}|{JsonUtil.Serialize(request.Order)}";
    }

    /// <summary>
    /// Resets the continuation token and clears the current page state.
    /// This is useful when you want to start pagination from the beginning.
    /// </summary>
    public void ResetContinuationToken()
    {
        _continuationToken = null;
        _lastFingerprint = null;
        _pagingHelper.Reset();
    }

    /// <summary>
    /// Sets a specific continuation token for the next request.
    /// This is useful for implementing custom pagination logic.
    /// </summary>
    /// <param name="continuationToken">The continuation token to use for the next request.</param>
    public void SetContinuationToken(string? continuationToken)
    {
        _continuationToken = continuationToken;
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();

        _dotNetReference?.Dispose();
        await OnDestroy.InvokeAsync();
    }

}
