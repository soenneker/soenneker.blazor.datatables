@using System.Threading
@using Microsoft.JSInterop
@using Soenneker.Blazor.DataTables.Options
@using Soenneker.Extensions.String
@using Soenneker.Extensions.ValueTask
@using Soenneker.Blazor.DataTables.Abstract
@using Soenneker.Blazor.Utils.InteropEventListener.Abstract
@using Microsoft.Extensions.Logging
@using Soenneker.Blazor.DataTables.Dtos
@using Soenneker.DataTables.Dtos.ServerSideRequest
@using Soenneker.Extensions.Task
@using Soenneker.Utils.Json

@implements IDataTable
@implements IAsyncDisposable

<div style="@(Visible ? "" : "display:none")" >
    <table id="@ElementId" @ref="_elementReference" @attributes="Attributes" >
        @ChildContent
    </table>
</div>

@code {

    [Inject]
    private IDataTablesInterop DataTablesInterop { get; set; } = null!;

    [Inject]
    private IInteropEventListener InteropEventListener { get; set; } = null!;

    [Inject]
    private ILogger<DataTable> Logger { get; set; } = null!;

    [Parameter]
    public EventCallback OnInitialize { get; set; }

    [Parameter]
    public EventCallback OnDestroy { get; set; }

    [Parameter]
    public Func<DataTablesServerSideRequest, Task<DataTablesServerResponse>>? OnServerSideRequest { get; set; }

    [Parameter]
    public bool Debug { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object?>? Attributes { get; set; }

    [Parameter]
    public DataTableOptions Options { get; set; } = new();

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private DotNetObjectReference<DataTable>? DotNetReference;
    public readonly string ElementId = $"datatable-{Guid.NewGuid().ToString()}";
    private readonly CancellationTokenSource _cTs = new();
    private ElementReference _elementReference;

    [Parameter]
    public bool Visible { get; set; } = true;

    private bool _elementInitialized;

    protected override async Task OnInitializedAsync()
    {
        await DataTablesInterop.Initialize(_cTs.Token).NoSync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            InteropEventListener.Initialize(DataTablesInterop);
        }

        if (!_elementInitialized && _elementReference.Id.HasContent())
        {
            _elementInitialized = true;

            await Initialize().NoSync();
        }
    }

    public async ValueTask Initialize(DataTableOptions? configuration = null, CancellationToken cancellationToken = default)
    {
        if (configuration != null)
            Options = configuration;

        DotNetReference = DotNetObjectReference.Create(this);

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);

        await DataTablesInterop.Create(_elementReference, ElementId, DotNetReference, Options, linkedCts.Token).NoSync();
        await DataTablesInterop.CreateObserver(_elementReference, ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask RefreshWithDomUpdate(Func<ValueTask> domMutator, CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);

        await domMutator().NoSync();

        StateHasChanged();
        await Task.Yield();

        await DataTablesInterop.Refresh(ElementId, linkedCts.Token).NoSync();
    }

    public ValueTask RefreshWithDomUpdate(Action domMutator, CancellationToken cancellationToken = default)
    {
        return RefreshWithDomUpdate(() =>
        {
            domMutator();
            return ValueTask.CompletedTask;
        }, cancellationToken);
    }

    public async ValueTask RecreateWithDomUpdate(Func<ValueTask> domMutator, CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);

        await domMutator().NoSync();

        StateHasChanged();
        await Task.Yield();

        await DataTablesInterop.Destroy(_elementReference, linkedCts.Token).NoSync();
        await Initialize(null, linkedCts.Token).NoSync();
    }

    public ValueTask RecreateWithDomUpdate(Action domMutator, CancellationToken cancellationToken = default)
    {
        return RecreateWithDomUpdate(() =>
        {
            domMutator();
            return ValueTask.CompletedTask;
        }, cancellationToken);
    }


    [JSInvokable]
    public async Task OnInitializedJs()
    {
        if (OnInitialize.HasDelegate)
        {
            await OnInitialize.InvokeAsync().NoSync();
        }
    }

    [JSInvokable]
    public async Task<string> OnServerSideRequestJs(string dataTablesRequestJson)
    {
        try
        {
            // Try to deserialize directly into the external package's DataTablesServerSideRequest
            var request = JsonUtil.Deserialize<DataTablesServerSideRequest>(dataTablesRequestJson);

            if (OnServerSideRequest != null)
            {
                DataTablesServerResponse result = await OnServerSideRequest(request);
                return JsonUtil.Serialize(result);
            }

            // Default empty response
            return "{\"data\":[],\"recordsTotal\":0,\"recordsFiltered\":0,\"draw\":0}";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing server-side request: {Message}", ex.Message);
            return "{\"data\":[],\"recordsTotal\":0,\"recordsFiltered\":0,\"draw\":0,\"error\":\"An error occurred while processing your request.\"}";
        }
    }

    public async ValueTask DisposeAsync()
    {
        DotNetReference?.Dispose();

        await _cTs.CancelAsync().NoSync();
        _cTs.Dispose();

        await OnDestroy.InvokeAsync().NoSync();
    }

}