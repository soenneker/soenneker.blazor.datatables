@using System.Threading
@using Microsoft.JSInterop
@using Soenneker.Blazor.DataTables.Base
@using Soenneker.Blazor.DataTables.Options
@using Soenneker.Blazor.Extensions.EventCallback
@using Soenneker.Extensions.String
@using Soenneker.Extensions.Task
@using Soenneker.Extensions.ValueTask

@implements Soenneker.Blazor.DataTables.Abstract.IDataTable
@inherits Soenneker.Blazor.DataTables.Base.BaseDataTable

<div style="@(_visible ? "" : "display:none")" >
    <table id="@ElementId" @ref="ElementReference" @attributes="Attributes" >
        @ChildContent
    </table>
</div>

@code {

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object?>? Attributes { get; set; }

    [Parameter]
    public DataTableOptions Options { get; set; } = new();

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private bool _elementInitialized;

    protected override async Task OnInitializedAsync()
    {
        await DataTablesInterop.Initialize(CTs.Token).NoSync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            InteropEventListener.Initialize(DataTablesInterop);
        }

        if (!_elementInitialized && ElementReference.Id.HasContent())
        {
            _elementInitialized = true;

            await Initialize().NoSync();
        }
    }

    public async ValueTask Initialize(DataTableOptions? configuration = null, CancellationToken cancellationToken = default)
    {
        if (configuration != null)
            Options = configuration;

        DotNetReference = DotNetObjectReference.Create<BaseDataTable>(this);

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);

        await DataTablesInterop.Create(ElementReference, ElementId, DotNetReference, Options, linkedCts.Token).NoSync();
        await DataTablesInterop.CreateObserver(ElementReference, ElementId, linkedCts.Token).NoSync();

        await AddEventListeners().NoSync();
    }

    public async ValueTask RefreshWithDomUpdate(Func<ValueTask> domMutator, CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);

        await domMutator().NoSync();

        StateHasChanged();
        await Task.Yield();

        await DataTablesInterop.Refresh(ElementId, linkedCts.Token).NoSync();
    }

    public ValueTask RefreshWithDomUpdate(Action domMutator, CancellationToken cancellationToken = default)
    {
        return RefreshWithDomUpdate(() =>
        {
            domMutator();
            return ValueTask.CompletedTask;
        }, cancellationToken);
    }

    public async ValueTask RecreateWithDomUpdate(Func<ValueTask> domMutator, CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);

        _visible = false;

        StateHasChanged();
        await Task.Yield(); // Let it hide before destroying

        await Destroy(linkedCts.Token).NoSync();

        await domMutator().NoSync(); // Caller updates DOM or data

        StateHasChanged(); // Force re-render
        await Task.Yield(); // Let Blazor flush DOM

        await Initialize(null, linkedCts.Token).NoSync(); // Recreate DataTable

        _visible = true;
        StateHasChanged(); // Reveal table after init
    }

    public ValueTask RecreateWithDomUpdate(Action domMutator, CancellationToken cancellationToken = default)
    {
        return RecreateWithDomUpdate(() =>
        {
            domMutator();
            return ValueTask.CompletedTask;
        }, cancellationToken);
    }

    [JSInvokable("OnInitializedJs")]
    public Task OnInitializedJs()
    {
        return OnInitialize.InvokeIfHasDelegate();
    }

    private async ValueTask AddEventListeners()
    {
        if (OnDestroy.HasDelegate)
        {
            await AddEventListener<string>(GetJsEventName(nameof(OnDestroy)), async _ => { await OnDestroy.InvokeAsync().NoSync(); }).NoSync();
        }
    }

    private static string GetJsEventName(string callback)
    {
        return callback[2..].ToSnakeCaseFromPascal();
    }

    private ValueTask AddEventListener<T>(string eventName, Func<T, ValueTask> callback)
    {
        return InteropEventListener.Add("DataTablesInterop.addEventListener", ElementId, eventName, callback, CTs.Token);
    }

}